#!/usr/bin/env python
r"""Hacky tool for pushing commits from git monorepo to svn.

Supports atomic commits across LLVM subprojects!  (For example, you can make an
atomic change to llvm and clang.)

Run this tool from within a git clone of
https://github.com/llvm-project/llvm-project.

** This script does not currently handle file renames -- they will show up in
svn as an unrelated add/remove pair. **

SVN_REPO should point to a svn checkout set up per below.  This script will
gleefully trash any uncommitted changes in this svn repo.  You have been warned.

GIT_REVS can be a proper git range (e.g. dead..beef), or a single commit.  If
omitted altogether, we jump through some hoops and try to figure out which
commits are in your current git branch but not yet upstream.  (You can set a
branch's upstream via "git branch --set-upstream-to".  Not --set-upstream.
...yeah.)

Suggested setup for the svn repo follows.  You only have to do this once.

  svn checkout --depth=immediates https://llvm.org/svn/llvm-project/ .
  svn update cfe/trunk clang-tools-extra/trunk compiler-rt/trunk dragonegg/trunk
  \
    klee/trunk libclc/trunk libcxx/trunk libcxxabi/trunk lld/trunk lldb/trunk \
    llvm/trunk polly/trunk

"""

# TODO: Handle renames (ugh).
# TODO: Support jyknight's monorepo two-point-oh, once it's completed.
# TODO: Less user-hostile error handling.

from __future__ import print_function
import argparse
import os
import subprocess
import sys
import tempfile

# It's *almost* a straightforward mapping from the monorepo to svn...
GIT_TO_SVN_DIR = {
    d: (d + '/trunk')
    for d in [
        'clang-tools-extra',
        'compiler-rt',
        'dragonegg',
        'klee',
        'libclc',
        'libcxx',
        'libcxxabi',
        'lld',
        'lldb',
        'llvm',
        'polly',
    ]
}
GIT_TO_SVN_DIR.update({'clang': 'cfe/trunk'})


def first_dirname(d):
  while True:
    (head, tail) = os.path.split(d)
    if not head or head == '/':
      return tail
    d = head


def shell(cmd, cwd=None, stdin=None):
  #print('%r' % cmd)
  return subprocess.check_output(cmd, cwd=cwd, stdin=stdin).strip()


def git(*cmd):
  return shell(['git'] + list(cmd))


def svn(cwd, *cmd, **kwargs):
  # TODO: Better way to do default arg when we have *cmd?
  return shell(['svn'] + list(cmd), cwd=cwd, stdin=kwargs.get('stdin', None))


def get_default_rev_range():
  # Get the branch tracked by the current branch, as set by
  # git branch --set-upstream-to  See http://serverfault.com/a/352236/38694.
  cur_branch = git('rev-parse', '--symbolic-full-name', 'HEAD')
  upstream_branch = git('for-each-ref', '--format=%(upstream:short)',
                        cur_branch)
  if not upstream_branch:
    upstream_branch = 'origin/master'

  # Get the newest common ancestor between HEAD and our upstream branch.
  upstream_rev = git('merge-base', 'HEAD', upstream_branch)
  return '%s..' % upstream_rev


def get_revs_to_push(rev_range):
  if not rev_range:
    rev_range = get_default_rev_range()
  # Use git show rather than some plumbing command to figure out which revs are
  # in rev_range because it handles single revs (HEAD^) and ranges (foo..bar)
  # like we want.
  revs = git('show', '--quiet', '--pretty=%h', rev_range).split('\n')
  if not revs:
    raise RuntimeError('Nothing to push: No revs in range %s.' % rev_range)
  return revs


def clean_and_update_svn(svn_repo):
  svn(svn_repo, 'revert', '-R', '.')

  # Unfortunately it appears there's no svn equivalent for git clean, so we have
  # to do it ourselves.  Because I'm paranoid, prompt before deleting anything.
  to_delete = []
  for line in svn(svn_repo, 'status').split('\n'):
    if not line.startswith('?'):
      continue
    sp = line.split(' ', 1)
    if len(sp) != 2:
      raise RuntimeError('Unexpected svn status line: %s' % line)
    to_delete.append(os.path.join(svn_repo, sp[1].strip()))

  if to_delete:
    print('Need to delete %d files to clean SVN repo: ' % len(to_delete))
    for f in to_delete:
      print('  %s' % f)
    if raw_input('Delete [yN]? ').lower() != 'y':
      sys.exit(1)
    for f in to_delete:
      os.remove(f)

  svn(svn_repo, 'update')


def push(svn_repo, rev, dry_run):
  files = git('diff-tree', '--no-commit-id', '--name-only', '-r',
              rev).split('\n')
  subrepos = {first_dirname(f) for f in files}
  if not subrepos:
    raise RuntimeError('Empty diff for rev %s?' % rev)

  status = svn(svn_repo, 'status')
  if status:
    print("Can't push git rev %s because svn status is not empty:\n%s" %
          (rev, status))
    sys.exit(1)

  for sr in subrepos:
    diff = git('show', rev, sr)
    svn_sr_path = os.path.join(svn_repo, GIT_TO_SVN_DIR[sr])
    with tempfile.TemporaryFile() as tf:
      tf.write(diff)
      tf.flush()
      tf.seek(0)
      # Apparently the only thing that sucks more than patch(1) is svn patch.
      shell(
          ['patch', '-p2', '--no-backup-if-mismatch', '-r', '-'],
          cwd=svn_sr_path,
          stdin=tf)

  status_lines = svn(svn_repo, 'status').split('\n')

  # Check that patch didn't dump any .orig or .rej files.
  for line in status_lines:
    if line.endswith('.rej') or line.endswith('.orig'):
      raise RuntimeError('patch left a .orig/.rej file in the svn repo: %s.' %
                         line)
  for line in (l for l in status_lines if l.startswith('?')):
    svn(svn_repo, 'add', l.split(' ')[1].strip())
  for line in (l for l in status_lines if l.startswith('!')):
    svn(svn_repo, 'remove', l.split(' ')[1].strip())

  # Now we're ready to commit.
  commit_msg = git('show', '--pretty=%B', '--quiet', rev)
  if not dry_run:
    svn(svn_repo, 'commit', '-m', commit_msg)
    print('Committed %s to svn.' % rev)
  else:
    print("Would have committed %s to svn, if this weren't a dry run." % rev)


def run(svn_repo, rev_range, dry_run):
  revs = get_revs_to_push(rev_range)
  print('Pushing %d commit%s:\n%s' %
        (len(revs), 's' if len(revs) != 1
         else '', '\n'.join('  ' + git('show', '--oneline', '--quiet', c)
                            for c in revs)))

  clean_and_update_svn(svn_repo)
  for r in revs:
    push(svn_repo, r, dry_run)


if __name__ == '__main__':
  parser = argparse.ArgumentParser(
      description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter)
  parser.add_argument(
      '-n',
      '--dry-run',
      dest='dry_run',
      action='store_true',
      help='Do everything other than commit to svn.  Leaves junk in the svn '
      'repo, so probably will not work well if you try to commit more '
      'than one rev.')
  parser.add_argument(
      'svn_repo',
      metavar='SVN_REPO',
      type=str,
      help='Path to SVN repo to push from')
  parser.add_argument(
      'rev_range',
      metavar='GIT_REVS',
      type=str,
      nargs='?',
      help="revs to push (default: everything not in the branch's "
      "upstream, or not in origin/master if the branch lacks "
      "an explicit upstream)")
  args = parser.parse_args()
  run(svn_repo=args.svn_repo, rev_range=args.rev_range, dry_run=args.dry_run)
